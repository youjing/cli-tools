#!/bin/bash

# 函数：显示用法
usage() {
    echo "错误: $1"
    echo "用法: $0 [-m model-name] [-l] <file-to-chat-with> | clipboard | <url>"
    exit 1
}

# 函数：检查llm是否已安装
check_llm_installed() {
    if ! command -v llm &> /dev/null; then
        echo "llm could not be found. Please install it and try again."
        exit 1
    fi
}

# 函数：处理剪贴板输入
handle_clipboard() {
    local FILE="/tmp/clipboard_content.txt"
    if command -v pbpaste &> /dev/null; then
        # MacOS
        pbpaste > "$FILE"
    elif command -v xclip &> /dev/null; then
        # Linux
        xclip -o > "$FILE"
    else
        echo "Clipboard tool not found. Please install pbpaste or xclip."
        exit 1
    fi
    echo "$FILE"
}

# 函数：处理URL输入
handle_url() {
    local URL="$1"
    local MD_FILE="/tmp/url_content.md"
    FILE_CONTENT=$(curl -s "https://r.jina.ai/$URL")
    if [ -z "$FILE_CONTENT" ]; then
        echo "Failed to retrieve content from URL."
        exit 1
    fi
    echo "$FILE_CONTENT" > "$MD_FILE"
    echo "$MD_FILE"
}

# 函数：处理文件输入
handle_file() {
    local FILE="$1"
    local BASE_NAME="${FILE%.*}"
    local EXT="${FILE##*.}"
    local MD_FILE="${BASE_NAME}.md"

    case "$EXT" in
        md)
            # Markdown file, use it directly
            # MD_FILE = "$1"
            ;;
        txt)
            # Text file, copy content to markdown file
            cp "$FILE" "$MD_FILE"
            ;;
        ppt|pptx|PPT|PPTX)
            # echo "Converting to MD: $MD_FILE"
            if [ ! -f "$MD_FILE" ]; then
                pptx2md "$FILE" -o "$MD_FILE"
            fi
                # echo "Markdown file already exists: $MD_FILE"
            
            ;;
        pdf)
            if [ ! -f "$MD_FILE" ]; then 
                pdftotext "$FILE" "$MD_FILE" 
            fi 
            # echo "Text file already exists: $MD_FILE"
            ;;
        *)
            # Unsupported file format, exit script
            # echo "Unsupported file format: $EXT. Exiting script."
            MD_FILE="" # set to blank
            ;;
    esac
    echo "$MD_FILE"
}

# 函数：生成摘要
generate_summary() {
    local FILE_CONTENT="$1"
    echo "内容摘要："
    if [ -n "$MODEL_NAME" ]; then
        llm -m $MODEL_NAME -s "生成3点内容摘要，" "内容：$FILE_CONTENT"
    else 
        llm -s "生成3点内容摘要，" "内容：$FILE_CONTENT"
    fi
    echo "-----------------------------"
}

# 函数：启动聊天
start_chat() {
    local FILE_CONTENT="$1"
    local MODEL_NAME="$2"
    local OLLAMA_MODE="$3"

    if [ -n "$MODEL_NAME" ]; then
        llm chat -m $MODEL_NAME -s "I will ask you questions with context: $FILE_CONTENT. Please answer based on the context."
    elif [ "$OLLAMA_MODE" = true ]; then
        llm chat -m gemma2:2b-instruct-fp16 -s "I will ask you questions with context: $FILE_CONTENT. Please answer based on the context."
    else
        llm chat -s "I will ask you questions with context: $FILE_CONTENT. Please answer based on the context."
    fi
}

# Start of the main program

# 检查参数是否为空
if [ $# -eq 0 ]; then
    usage "未提供任何参数"
fi

# 依赖检查
check_llm_installed

# 处理命令行选项
OLLAMA_MODE=false
while getopts "m:l" opt; do
    case ${opt} in
        m ) MODEL_NAME=$OPTARG ;;
        l ) OLLAMA_MODE=true ;;
        \? ) usage ;;
    esac
done
shift $((OPTIND -1))

INPUT="$1"
MD_FILE=""

# 处理不同类型的输入
if [ "$INPUT" = "clipboard" ]; then
    MD_FILE=$(handle_clipboard)
elif [[ "$INPUT" == http* ]]; then
    MD_FILE=$(handle_url "$INPUT")
else
    MD_FILE=$(handle_file "$INPUT")
fi

# 检查 MD_FILE 是否为空
if [ -z "$MD_FILE" ]; then
    echo "Unsupported file format. Exiting ..."
    exit 1
fi

# 开始与文件或内容的对话
FILE_CONTENT=$(cat "$MD_FILE")

# 生成摘要并启动聊天
generate_summary "$FILE_CONTENT"
start_chat "$FILE_CONTENT" "$MODEL_NAME" "$OLLAMA_MODE"

echo "Happy chatting with you! Bye for now ..."
